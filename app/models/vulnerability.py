from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional, Any

from pydantic import BaseModel, ConfigDict


class ThreatLevel(str, Enum):
    """Threat level enumeration"""
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"


class Vulnerability(BaseModel):
    """Vulnerability data from OSV.dev API"""
    id: str
    summary: str
    description: Optional[str] = None
    severity: Optional[str] = None
    affected_packages: List[Dict[str, Any]] = []
    references: List[Dict[str, str]] = []
    published: Optional[datetime] = None
    modified: Optional[datetime] = None
    database_specific: Dict[str, Any] = {}

    model_config = ConfigDict(from_attributes=True)


class VulnerabilityReport(BaseModel):
    """Vulnerability report with triage results"""
    vulnerability: Vulnerability
    dependency: str
    dependency_version: str
    is_real_threat: bool
    threat_level: ThreatLevel
    impact_summary: str
    recommendation: str
    evidence: Dict[str, Any]
    triage_confidence: float

    model_config = ConfigDict(from_attributes=True)
